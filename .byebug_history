exit
i.response.body
i.response.body.
c
i.request.headers['Authorization'] = nil
i.request.headers['Authorization']
i.request
i.response
i
c
exit
c
response.class
c
exit
setup
super.class
super
super.setup
setup.super
exit
@client.last_request.code
@client.last_request.status
@client.last_request.request.url.include?(@rest_plurilized.downcase)
@rest_plurilized.downcase
@rest_plurilized.lowcase
@rest_plurilized.lowercase
@rest_plurilized.lower_case
@rest_plurilized.lower
@rest_plurilized.to_lower
@rest_plurilized
@client.last_request.request.url.include?(@rest_plurilized)
@client.company_endpoint
@client.companies_endpoint
@client::Rest::Company.companies_endpoint
@client.last_request.request.url.include? '/company'
@client.last_request.request.url.include? '/companies'
@client.last_request.request.url.include? 'a'
@client.last_request.request.url
@client.last_request.request
@client.last_request
[].present?
response.present?
assert [].present?
exit
assert [].present?
assert []
asset []
assert_empty 0
assert 1
assert 0
response.size > 1
response.class
response
exit
@client.last_request
@client.list_companies
@client
exit
@rest.pluralize
@rest.pluralize(2)
@rest = self.class.name.gsub('Test', '')
self.class.name.gsub('Test', '')
self.class.name.gsub('Test')
self.class.name
self.class
__class__
class
FastNotas::Client.new(API_KEY_TEST)
c
client.api_endpoint
client.version
c
exit
client.list_companies
c
api_key
exit
api_key
c
exit
api_key
c
client.list_companies
c
client.list_companies
exit
client.list_companies
c
__module__
self
exit
self
__CLASS__
__MODULE__
__module__
exit
c
exit
client.list_companies
c
params
exit
params.to_query
params
params.to_query
endpoint
api_endpoint
"#{api_endpoint}#{endpoint}?#{params.to_query}"
method
@last_request = RestClient::Request.execute(method: method, url: "#{api_endpoint}#{endpoint}?#{params.to_query}", payload: payload, user: api_key, headers: connection_options[:headers] )
        )
          headers: connection_options[:headers]
          user: api_key,
          payload: payload,
          url: "#{api_endpoint}#{endpoint}?#{params.to_query}",
          method: method,
@last_request = RestClient::Request.execute(
exit
c
exit
client.list_companies
exit
client.list_companies
exit
client.list_companies
exit
client.list_companies
exit
c
args
list('/company')
c
respont_to? :list
respont_to? list
list
send "#{entity_name.downcase}_endpoint"
send "#{entity_name.to_lower}_endpoint"
entity_name.downcase
entity_name.down_case
entity_name.methods
entity_name.to_lower
company_endpoint
Company.company_endpoint
Company.api_key
Company
"FastNotas::Rest::#{entity_name}".classify.constantize
"FastNotas::Rest::#{entity_name}".classyfy.constantize
entity?(entity_name)
entity_name
exit
resource_method?(resource_name)
entity_name
entity?(entity_name)
c
entity_name
entity?(entity_name)
FastNotas::Rest.constants
FastNotas::Rest.methods
FastNotas::Rest::Constants
FastNotas::Rest::Conatants
a_array.from(1).join('_').singularize
a_array.from(1).join('_').singulirize
a_array.from(1).join('_')
a_array.from(1)
a_array[-2]
a_array[-1]
a_array[-1, -2]
a_array[-1..-2]
a_array[-1..2]
a_array[1..2]
a_array[1..]
a_array[2..]
a_array[2, -1]
a_array[2, 1-]
a_array[-1, 2]
a_array[-0, -2]
a_array[0, -2]
a_array[-1, -2]
a_array[-0, -2]
a_array[-0, 2]
a_array[-1, 2]
a_array[-0, 2]
a_array[0, -1]
a_array[-1, 2]
a_array[2, -1]
a_array[-1]
a_array = a.split('_')
a = 'list_document_schemas'
method_array[-1]
method_array[1, -1]
FastNotas::Resources.public_instance_methods.include? method_array[0].to_sym
FastNotas::Resources.public_instance_methods.include? method_array.to_sym
FastNotas::Resources.public_instance_methods
FastNotas::Resources.methods
FastNotas::Resources
exit
m.to_s.methods
m.to_s.split('_')
m.to_s.split('.')
m.to_s.split('_')
m.tos_s.split('_')
m.tos_ssplit('_')
m.split('_')
m
exit
client.list_companies(:test)
exit
__method__
method
client.list_companies(:test)
exit
client.list_companies(:test)
c
client.list_companies(:test)
exit
client.list_companies
c
exit
client.list_companies
client.list_companies(1)
exit
client.list_companies(1)
client.list_companies
c
exit
client.list_companies
c
exit
client.list_companies
c
exit
FastNotas::Rest::constants
FastNotas::Rest::modules
c
client.my_company
c
methods
exit
methods
c
exit
client.my_company
client = FastNotas::Client.new('fufewgiuefwgiu')
exit
client = FastNotas::Client.new
exit
client.my_company
client = FastNotas::Client.new
FastNotas::Client.new
exit
FastNotas::Client.new
FastNotas::Client
